
#pragma once

enum XAssetType
{
	ASSET_TYPE_PHYSPRESET,
	ASSET_TYPE_PHYS_COLLMAP,
	ASSET_TYPE_XANIM,
	ASSET_TYPE_XMODELSURFS,
	ASSET_TYPE_XMODEL,
	ASSET_TYPE_MATERIAL,
	ASSET_TYPE_PIXELSHADER,
	ASSET_TYPE_VERTEXSHADER,
	ASSET_TYPE_TECHSET,
	ASSET_TYPE_IMAGE,
	ASSET_TYPE_SOUND,
	ASSET_TYPE_SNDCURVE,
	ASSET_TYPE_LOADED_SOUND,
	ASSET_TYPE_COL_MAP_SP,
	ASSET_TYPE_COM_MAP,
	ASSET_TYPE_GLASS_MAP,
	ASSET_TYPE_AIPATHS,
	ASSET_TYPE_VEHICLE_TRACK,
	ASSET_TYPE_MAP_ENTS,
	ASSET_TYPE_FX_MAP,
	ASSET_TYPE_GFX_MAP,
	ASSET_TYPE_LIGHTDEF,
	ASSET_TYPE_UI_MAP,
	ASSET_TYPE_FONT,
	ASSET_TYPE_MENUFILE,
	ASSET_TYPE_MENU,
	ASSET_TYPE_LOCALIZE,
	ASSET_TYPE_ATTACHMENT,
	ASSET_TYPE_WEAPON,
	ASSET_TYPE_SNDDRIVERGLOBALS,
	ASSET_TYPE_FX,
	ASSET_TYPE_IMPACTFX,
	ASSET_TYPE_SURFACEFX,
	ASSET_TYPE_AITYPE,
	ASSET_TYPE_MPTYPE,
	ASSET_TYPE_CHARACTER,
	ASSET_TYPE_XMODELALIAS,
	ASSET_TYPE_RAWFILE,
	ASSET_TYPE_SCRIPTFILE,
	ASSET_TYPE_STRINGTABLE,
	ASSET_TYPE_LEADERBOARDDEF,
	ASSET_TYPE_STRUCTUREDDATADEF,
	ASSET_TYPE_TRACER,
	ASSET_TYPE_VEHICLE,
	ASSET_TYPE_ADDON_MAP_ENTS
};

enum he_type_t
{
	HE_TYPE_FREE,
	HE_TYPE_TEXT,
	HE_TYPE_VALUE,
	HE_TYPE_PLAYERNAME,
	HE_TYPE_MATERIAL,
	HE_TYPE_TIMER_DOWN,
	HE_TYPE_TIMER_UP,
	HE_TYPE_TIMER_STATIC,
	HE_TYPE_TENTHS_TIMER_DOWN,
	HE_TYPE_TENTHS_TIMER_UP,
	HE_TYPE_TENTHS_TIMER_STATIC,
	HE_TYPE_CLOCK_DOWN,
	HE_TYPE_CLOCK_UP,
	HE_TYPE_WAYPOINT,
	HE_TYPE_COUNT
};

enum he_font_t 
{ 
	HE_FONT_DEFAULT, 
	HE_FONT_BIGFIXED, 
	HE_FONT_SMALLFIXED, 
	HE_FONT_OBJECTIVE, 
	HE_FONT_BIG,
	HE_FONT_SMALL, 
	HE_FONT_HUDBIG, 
	HE_FONT_HUDSMALL, 
	HE_FONT_COUNT
};

enum hudelemFlag_t
{ 
	HUDELEMFLAG_FOREGROUND = (1 << 0), 
	HUDELEMFLAG_HIDEWHENDEAD = (1 << 1),
	HUDELEMFLAG_HIDEWHENINMENU = (1 << 2),
	HUDELEMFLAG_WAYPOINT_PINTOEDGE = (1 << 3),
	HUDELEMFLAG_WAYPOINT_FADEATEDGE = (1 << 4),
	HUDELEMFLAG_WAYPOINT_ROTATEATEDGE = (1 << 5),
	HUDELEMFLAG_WAYPOINT_OFFSCREENONLY = (1 << 6),
	HUDELEMFLAG_LOWRES_BACKGROUND = (1 << 8),
	HUDELEMFLAG_IS_CONSTANTSIZE = (1 << 9),
	HUDELEMFLAG_DRAW_3D = (1 << 10),
	HUDELEMFLAG_HIDEWHENIN3RDPERSON = (1 << 11),
	HUDELEMFLAG_HIDEWHENINDEMO = (1 << 12),

	HUDELEMFLAGBITS = 13
};

enum ViewLockTypes
{
	PLAYERVIEWLOCK_NONE,
	PLAYERVIEWLOCK_FULL,
	PLAYERVIEWLOCK_WEAPONJITTER,
	PLAYERVIEWLOCKCOUNT
};

enum OffhandClass
{
	OFFHAND_CLASS_NONE,
	OFFHAND_CLASS_FRAG_GRENADE,
	OFFHAND_CLASS_SMOKE_GRENADE,
	OFFHAND_CLASS_FLASH_GRENADE,
	OFFHAND_CLASS_THROWINGKNIFE,
	OFFHAND_CLASS_OTHER,
	OFFHAND_CLASS_COUNT
};

enum PlayerHandIndex
{
	WEAPON_HAND_RIGHT,
	WEAPON_HAND_LEFT,
	NUM_WEAPON_HANDS,

	WEAPON_HAND_DEFAULT = WEAPON_HAND_RIGHT
};

enum ActionSlotType
{
	ACTIONSLOTTYPE_DONOTHING,
	ACTIONSLOTTYPE_SPECIFYWEAPON,
	ACTIONSLOTTYPE_ALTWEAPONTOGGLE,
	ACTIONSLOTTYPE_NIGHTVISION,
	ACTIONSLOTTYPECOUNT
};

enum clientConnected_t
{
	CON_DISCONNECTED,
	CON_CONNECTING,
	CON_CONNECTED
};

enum PhysPresetScaling
{
	PHYSPRESET_SCALING_LINEAR,
	PHYSPRESET_SCALING_QUADRATIC,
	PHYSPRESET_SCALING_COUNT
};

enum hintType_t
{
	HINT_NONE,
	HINT_NOICON,
	HINT_ACTIVATE,
	HINT_HEALTH,
	HINT_FRIENDLY,
	HINT_WEAPON,
	HINT_NUM_HINTS
};

enum trType_t
{
	TR_STATIONARY,
	TR_INTERPOLATE,
	TR_LINEAR,
	TR_LINEAR_STOP,
	TR_SINE,
	TR_GRAVITY,
	TR_LOW_GRAVITY,
	TR_ACCELERATE,
	TR_DECELERATE,
	TR_PHYSICS,
	TR_FIRST_RAGDOLL,
	TR_RAGDOLL = TR_FIRST_RAGDOLL,
	TR_RAGDOLL_GRAVITY,
	TR_RAGDOLL_INTERPOLATE,
	TR_LAST_RAGDOLL = TR_RAGDOLL_INTERPOLATE,
	NUM_TRTYPES
};

enum MissileFlightMode
{
	MISSILEFLIGHTMODE_TOP,
	MISSILEFLIGHTMODE_DIRECT,
	MISSILEFLIGHTMODE_COUNT
};

enum team_t
{
	TEAM_FREE,
	TEAM_BAD = 0,
	TEAM_AXIS,
	TEAM_ALLIES,
	TEAM_THREE,
	TEAM_NEUTRAL,
	TEAM_DEAD,
	TEAM_NUM_TEAMS
};

enum nodeType
{
	NODE_ERROR,
	NODE_PATHNODE,
	NODE_COVER_STAND,
	NODE_COVER_CROUCH,
	NODE_COVER_CROUCH_WINDOW,
	NODE_COVER_PRONE,
	NODE_COVER_RIGHT,
	NODE_COVER_LEFT,
	NODE_AMBUSH,
	NODE_EXPOSED,
	NODE_CONCEALMENT_STAND,
	NODE_CONCEALMENT_CROUCH,
	NODE_CONCEALMENT_PRONE,
	NODE_DOOR,
	NODE_DOOR_INTERIOR,
	NODE_SCRIPTED,
	NODE_NEGOTIATION_BEGIN,
	NODE_NEGOTIATION_END,
	NODE_TURRET,
	NODE_GUARD,
	NODE_NUMTYPES,
	NODE_DONTLINK = NODE_NUMTYPES,
};

enum PathNodeErrorCode
{
	PNERR_NONE,
	PNERR_INSOLID,
	PNERR_FLOATING,
	PNERR_NOLINK,
	PNERR_DUPLICATE,
	PNERR_NOSTANCE,
	PNERR_INVALIDDOOR,
	PNERR_NOANGLES,
	PNERR_BADPLACEMENT,
	NUM_PATH_NODE_ERRORS
};

enum AISpecies
{
	AI_SPECIES_HUMAN,
	AI_SPECIES_DOG,
	AI_SPECIES_CIVILIAN,
	MAX_AI_SPECIES,
	AI_SPECIES_ALL = MAX_AI_SPECIES
};

enum ai_state_t
{
	AIS_INVALID,
	AIS_KEEPCURRENT = 0,
	AIS_EXPOSED,
	AIS_TURRET,
	AIS_GRENADE_RESPONSE,
	AIS_BADPLACE_FLEE,
	AIS_COVERARRIVAL,
	AIS_DEATH,
	AIS_DEFAULT = 1,
	AIS_SETABLE_FIRST = 1,
	AIS_SETABLE_LAST = 6,
	AIS_PAIN,
	AIS_FLASHBANGED,
	AIS_SCRIPTEDANIM,
	AIS_CUSTOMANIM,
	AIS_NEGOTIATION,
	AIS_PUSHABLE_FIRST = 7,
	AIS_PUSHABLE_LAST = 11,
	AIS_COUNT
};

enum ai_substate_t
{
	STATE_EXPOSED_COMBAT = 0x64,
	STATE_EXPOSED_NONCOMBAT = 0x65,
	STATE_EXPOSED_REACQUIRE_MOVE = 0x66,
	STATE_EXPOSED_REACQUIRE_DONE = 0x67,
	STATE_EXPOSED_REACTION = 0x68,
	STATE_DEATH_PRECLEANUP = 0xC8,
	STATE_DEATH_POSTCLEANUP = 0xC9,
	STATE_GRENADE_FLEE = 0x12C,
	STATE_GRENADE_TAKECOVER = 0x12D,
	STATE_GRENADE_COWER = 0x12E,
	STATE_GRENADE_COMBAT = 0x12F,
	STATE_GRENADE_COVERATTACK = 0x130,
	STATE_GRENADE_ACQUIRE = 0x131,
	STATE_GRENADE_THROWBACK = 0x132,
	STATE_GRENADE_AFTER_EXPLODE_FIRST = 0x133,
	STATE_GRENADE_COWER_AFTER_EXPLODE = 0x134,
	STATE_GRENADE_COMBAT_AFTER_EXPLODE = 0x135,
	STATE_GRENADE_COVERATTACK_AFTER_EXPLODE = 0x136,
};

enum ai_state_transition_t
{
	AIS_TRANSITION_CANONICAL = -1,
	AIS_TRANSITION_NONE = 0,
	AIS_TRANSITION_SET,
	AIS_TRANSITION_PUSH,
	AIS_TRANSITION_POP
};

enum ai_orient_mode_t
{
	AI_ORIENT_INVALID,
	AI_ORIENT_DONT_CHANGE,
	AI_ORIENT_TO_MOTION,
	AI_ORIENT_TO_ENEMY,
	AI_ORIENT_TO_ENEMY_OR_MOTION,
	AI_ORIENT_TO_GOAL,
	AI_ORIENT_COUNT
};

enum DelayedWeapDropState
{
	ACTOR_WEAP_DROP_NONE,
	ACTOR_WEAP_DROP_GRAB_INITIAL_VALUE,
	ACTOR_WEAP_DROP_FINISH
};

enum CombatMode
{
	AI_COMBAT_COVER,
	AI_COMBAT_NO_COVER,
	AI_COMBAT_AMBUSH,
	AI_COMBAT_AMBUSH_NODES_ONLY,
	NUM_COMBAT_MODES
};

enum AlertLevel
{
	AI_ALERTNESS_ASLEEP,
	AI_ALERTNESS_NONCOMBAT,
	AI_ALERTNESS_ALERT,
	AI_ALERTNESS_COMBAT,
	NUM_ALERT_LEVELS
};

enum ai_stance_e
{
	STANCE_BAD = 0,
	STANCE_STAND = (1 << 0),
	STANCE_CROUCH = (1 << 1),
	STANCE_PRONE = (1 << 2),
	STANCE_ANY = (STANCE_STAND | STANCE_CROUCH | STANCE_PRONE)
};

enum ai_traverse_mode_t
{
	AI_TRAVERSE_INVALID,
	AI_TRAVERSE_GRAVITY,
	AI_TRAVERSE_NOGRAVITY,
	AI_TRAVERSE_NOCLIP,
	AI_TRAVERSE_COUNT
};

enum ai_animmode_t
{
	AI_ANIM_UNKNOWN,
	AI_ANIM_MOVE_CODE,
	AI_ANIM_USE_POS_DELTAS,
	AI_ANIM_USE_ANGLE_DELTAS,
	AI_ANIM_USE_BOTH_DELTAS,
	AI_ANIM_USE_BOTH_DELTAS_NOCLIP,
	AI_ANIM_USE_BOTH_DELTAS_NOGRAVITY,
	AI_ANIM_USE_BOTH_DELTAS_ZONLY_PHYSICS,
	AI_ANIM_NOPHYSICS,
	AI_ANIM_POINT_RELATIVE
};

enum aiphys_t
{
	AIPHYS_BAD,
	AIPHYS_NORMAL_ABSOLUTE,
	AIPHYS_NORMAL_RELATIVE,
	AIPHYS_NOCLIP,
	AIPHYS_NOGRAVITY,
	AIPHYS_ZONLY_PHYSICS_RELATIVE,
	AIPHYS_ZONLY_PHYSICS_ABSOLUTE
};

enum AI_STAIRS_STATE
{
	AI_STAIRS_NONE,
	AI_STAIRS_UP,
	AI_STAIRS_DOWN,
	NUM_STAIRS_STATES
};

enum aiGoalSources
{
	AI_GOAL_SRC_SCRIPT_GOAL,
	AI_GOAL_SRC_SCRIPT_ENTITY_GOAL,
	AI_GOAL_SRC_FRIENDLY_CHAIN,
	AI_GOAL_SRC_ENEMY,
	AI_GOAL_SRC_DANGER_REACT
};

enum VehicleDrivingState
{
	VEH_DRIVE_NONE,
	VEH_DRIVE_ANIMSCRIPTED,
	VEH_DRIVE_PATH_CONSTRAINED,
	VEH_DRIVE_PATH_FOLLOW,
	VEH_DRIVE_TRACK,
	VEH_DRIVE_AI,
	VEH_DRIVE_PLAYER
};

enum VehicleTransmission
{
	VEH_TRANS_FORWARD,
	VEH_TRANS_REVERSE
};

enum VehiclePathDir
{
	VEH_PATH_FORWARD,
	VEH_PATH_REVERSE
};

enum JointType
{
	RAGDOLL_JOINT_NONE,
	RAGDOLL_JOINT_HINGE,
	RAGDOLL_JOINT_SWIVEL
};

enum VehicleAxleType
{
	VEH_AXLE_FRONT,
	VEH_AXLE_REAR,
	VEH_AXLE_ALL,
	VEH_AXLE_COUNT
};

enum HelicopterMoveState
{
	VEH_MOVESTATE_STOP,
	VEH_MOVESTATE_MOVE,
	VEH_MOVESTATE_HOVER
};

enum VehicleCameraState
{
	VEH_CAMERA_DEFAULT,
	VEH_CAMERA_DELAYED,
	VEH_CAMERA_CHANGED
};

enum VehicleManualMode
{
	VEH_MANUAL_OFF,
	VEH_MANUAL_ON,
	VEH_MANUAL_TRANS
};

enum VehicleRotateToMode
{
	VEH_ROTATE_TO_OFF,
	VEH_ROTATE_TO_ACCEL,
	VEH_ROTATE_TO_DECEL,
};

enum VehiclePathType
{
	VEH_PATH_FOLLOW,
	VEH_PATH_CONSTRAINED
};

enum MissileStage
{
	MISSILESTAGE_SOFTLAUNCH,
	MISSILESTAGE_ASCENT,
	MISSILESTAGE_DESCENT
};

enum loading_t
{
	LOADING_DONE,
	LOADING_LEVEL,
	LOADING_SAVEGAME
};

enum TraceHitType 
{ 
	TRACE_HITTYPE_NONE, 
	TRACE_HITTYPE_ENTITY, 
	TRACE_HITTYPE_DYNENT_MODEL, 
	TRACE_HITTYPE_DYNENT_BRUSH, 
	TRACE_HITTYPE_GLASS
};

enum weapType_t
{
	WEAPTYPE_NONE,
	WEAPTYPE_BULLET,
	WEAPTYPE_GRENADE,
	WEAPTYPE_PROJECTILE,
	WEAPTYPE_RIOTSHIELD,
	WEAPTYPE_NUM
};

enum weapClass_t
{
	WEAPCLASS_RIFLE,
	WEAPCLASS_SNIPER,
	WEAPCLASS_MG,
	WEAPCLASS_SMG,
	WEAPCLASS_SPREAD,
	WEAPCLASS_PISTOL,
	WEAPCLASS_GRENADE,
	WEAPCLASS_ROCKETLAUNCHER,
	WEAPCLASS_TURRET,
	WEAPCLASS_THROWINGKNIFE,
	WEAPCLASS_NON_PLAYER,
	WEAPCLASS_ITEM,
	WEAPCLASS_NUM
};

enum PenetrateType
{
	PENETRATE_TYPE_NONE,
	PENETRATE_TYPE_SMALL,
	PENETRATE_TYPE_MEDIUM,
	PENETRATE_TYPE_LARGE,
	PENETRATE_TYPE_COUNT
};

enum weapInventoryType_t
{
	WEAPINVENTORY_PRIMARY,
	WEAPINVENTORY_OFFHAND,
	WEAPINVENTORY_ITEM,
	WEAPINVENTORY_ALTMODE,
	WEAPINVENTORY_EXCLUSIVE,
	WEAPINVENTORY_SCAVENGER,
	WEAPINVENTORYCOUNT
};

enum weapFireType_t
{
	WEAPON_FIRETYPE_FULLAUTO,
	WEAPON_FIRETYPE_SINGLESHOT,
	WEAPON_FIRETYPE_BURSTFIRE2,
	WEAPON_FIRETYPE_BURSTFIRE3,
	WEAPON_FIRETYPE_BURSTFIRE4,
	WEAPON_FIRETYPE_DOUBLEBARREL,
	WEAPON_FIRETYPECOUNT,
	WEAPON_FIRETYPE_BURSTFIRE_FIRST,
	WEAPON_FIRETYPE_BURSTFIRE_LAST
};

enum weapStance_t
{
	WEAPSTANCE_STAND,
	WEAPSTANCE_DUCK,
	WEAPSTANCE_PRONE,
	WEAPSTANCE_NUM
};

enum activeReticleType_t
{
	VEH_ACTIVE_RETICLE_NONE,
	VEH_ACTIVE_RETICLE_PIP_ON_A_STICK,
	VEH_ACTIVE_RETICLE_BOUNCING_DIAMOND,
	VEH_ACTIVE_RETICLE_COUNT
};

enum weaponIconRatioType_t
{
	WEAPON_ICON_RATIO_1TO1,
	WEAPON_ICON_RATIO_2TO1,
	WEAPON_ICON_RATIO_4TO1,
	WEAPON_ICON_RATIO_COUNT
};

enum ammoCounterClipType_t
{
	AMMO_COUNTER_CLIP_NONE,
	AMMO_COUNTER_CLIP_MAGAZINE,
	AMMO_COUNTER_CLIP_SHORTMAGAZINE,
	AMMO_COUNTER_CLIP_SHOTGUN,
	AMMO_COUNTER_CLIP_ROCKET,
	AMMO_COUNTER_CLIP_BELTFED,
	AMMO_COUNTER_CLIP_ALTWEAPON,
	AMMO_COUNTER_CLIP_COUNT
};

enum weapOverlayReticle_t
{
	WEAPOVERLAYRETICLE_NONE,
	WEAPOVERLAYRETICLE_CROSSHAIR,
	WEAPOVERLAYRETICLE_NUM
};

enum WeapOverlayInteface_t
{
	WEAPOVERLAYINTERFACE_NONE,
	WEAPOVERLAYINTERFACE_JAVELIN,
	WEAPOVERLAYINTERFACE_TURRETSCOPE,
	WEAPOVERLAYINTERFACECOUNT
};

enum weapProjExposion_t
{
	WEAPPROJEXP_GRENADE,
	WEAPPROJEXP_ROCKET,
	WEAPPROJEXP_FLASHBANG,
	WEAPPROJEXP_NONE,
	WEAPPROJEXP_DUD,
	WEAPPROJEXP_SMOKE,
	WEAPPROJEXP_HEAVY,
	WEAPPROJEXP_NUM
};

enum WeapStickinessType
{
	WEAPSTICKINESS_NONE,
	WEAPSTICKINESS_ALL,
	WEAPSTICKINESS_ALL_ORIENT,
	WEAPSTICKINESS_GROUND,
	WEAPSTICKINESS_GROUND_WITH_YAW,
	WEAPSTICKINESS_KNIFE,
	WEAPSTICKINESS_COUNT
};

enum guidedMissileType_t
{
	MISSILE_GUIDANCE_NONE,
	MISSILE_GUIDANCE_SIDEWINDER,
	MISSILE_GUIDANCE_HELLFIRE,
	MISSILE_GUIDANCE_JAVELIN,
	MISSILE_GUIDANCE_COUNT
};

enum AttachmentType
{
	ATTACHMENT_SCOPE,
	ATTACHMENT_UNDERBARREL,
	ATTACHMENT_OTHER,
	ATTACHMENT_COUNT
};

enum ImpactType
{
	IMPACT_TYPE_NONE,
	IMPACT_TYPE_BULLET_SMALL,
	IMPACT_TYPE_BULLET_LARGE,
	IMPACT_TYPE_BULLET_AP,
	IMPACT_TYPE_BULLET_EXPLODE,
	IMPACT_TYPE_SHOTGUN,
	IMPACT_TYPE_SHOTGUN_EXPLODE,
	IMPACT_TYPE_GRENADE_BOUNCE,
	IMPACT_TYPE_GRENADE_EXPLODE,
	IMPACT_TYPE_ROCKET_EXPLODE,
	IMPACT_TYPE_PROJECTILE_DUD,
	IMPACT_TYPE_COUNT
};

enum DvarType 
{ 
	DVAR_TYPE_BOOL, 
	DVAR_TYPE_FLOAT, 
	DVAR_TYPE_FLOAT_2, 
	DVAR_TYPE_FLOAT_3, 
	DVAR_TYPE_FLOAT_4, 
	DVAR_TYPE_INT, 
	DVAR_TYPE_ENUM, 
	DVAR_TYPE_STRING, 
	DVAR_TYPE_COLOR, 
	DVAR_TYPE_FLOAT_3_COLOR, 
	DVAR_TYPE_COUNT
};

enum DvarSetSource
{ 
	DVAR_SOURCE_INTERNAL, 
	DVAR_SOURCE_EXTERNAL, 
	DVAR_SOURCE_SCRIPT
};

enum BlurTime
{ 
	BLUR_TIME_RELATIVE, 
	BLUR_TIME_ABSOLUTE
};

enum BlurPriority
{ 
	BLUR_PRIORITY_NONE, 
	BLUR_PRIORITY_SCRIPT, 
	BLUR_PRIORITY_CODE
};